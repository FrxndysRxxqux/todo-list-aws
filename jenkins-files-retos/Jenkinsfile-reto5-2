pipeline {
    agent any
    environment {
        GIT_CREDENTIALS = 'git-credentials' //  ID de las credenciales configuradas
        GIT_URL = 'todo-list-aws.git' //nombre repositorio git para url
    }
    stages {
        stage('CD - GetCode') {
            steps {
                script{
                    git branch:'master',
                    url:'https://github.com/FrxndysRxxqux/todo-list-aws.git'
                    sh """ 
                        echo "Descargando samconfig.toml del repositorio publico donde se encuentra la configuracion..."
                        curl -o samconfig.toml -L "https://raw.githubusercontent.com/FrxndysRxxqux/todo-list-aws-config/production/samconfig.toml"
                        ls -la
                        cat samconfig.toml
                    """
                }
            }
        }
        
        stage('CD - Deploy'){
            steps{
                script{
                    //obtenemos los varoes del deploy desde el archivo que nos hemos descargado del repositorio "todo-list-aws-config"
                    def stack_name = sh(script: "awk -F ' = \"' '/stack_name/ {print \$2}' samconfig.toml | tr -d '\"'", returnStdout: true).trim();
                    def region = sh(script: "awk -F ' = \"' '/region/ {print \$2}' samconfig.toml | tr -d '\"'", returnStdout: true).trim();
                    def s3_prefix = sh(script: "awk -F ' = \"' '/s3_prefix/ {print \$2}' samconfig.toml | tr -d '\"'", returnStdout: true).trim();
                    def capabilities = sh(script: "awk -F ' = \"' '/capabilities/ {print \$2}' samconfig.toml | tr -d '\"'", returnStdout: true).trim();
                    def stage = 'production' // Cambiar según el entorno

                    sh """
                        # Ejecutar el comando sam build
                        sam build
        
                        # Permitir que sam deploy falle si la pila ya existe
                        sam deploy --stack-name ${stack_name} \
                                   --region ${region}  \
                                   --s3-prefix ${s3_prefix} \
                                   --no-confirm-changeset \
                                   --no-fail-on-empty-changeset \
                                   --capabilities ${capabilities} \
                                   --resolve-s3 \
                                   --parameter-overrides Stage=${stage} \

        
                        # Usar cada valor del array como parámetro
                        aws cloudformation describe-stacks --stack-name ${stack_name} --query 'Stacks[0].Outputs' --output json > ${stack_name}-outputs.json
                    """
                }
            }
        }
        
        stage('CD - Test Rest') {
            steps {
                script{
                    def stack_name = sh(script: "awk -F ' = \"' '/stack_name/ {print \$2}' samconfig.toml | tr -d '\"'", returnStdout: true).trim()
                    sh """
                        ListTodosApi=\$(jq -r '.[] | select(.OutputKey=="ListTodosApi") | .OutputValue' ${stack_name}-outputs.json)
                        GetTodoApi=\$(jq -r '.[] | select(.OutputKey=="GetTodoApi") | .OutputValue' ${stack_name}-outputs.json)
                   
                        echo "Validando LIST TODO API..."
                        RESPONSE=\$(curl -s "\${ListTodosApi}" -w "\n%{http_code}")
                        HTTP_CODE=\$(echo "\${RESPONSE}" | tail -n1)
                        JSON_RESPONSE=\$(echo "\${RESPONSE}" | sed '\$d')
                        
                        if [ "\${HTTP_CODE}" -ne 200 ]; then
                            echo "ERROR: LIST TODO API fallo con codigo \${HTTP_CODE}"
                            echo "Respuesta completa: \${JSON_RESPONSE}"
                            exit 1
                        fi
                    """
                }
            }
        }
    }
}